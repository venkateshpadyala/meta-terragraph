"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8417],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(h,s(s({ref:t},d),{},{components:n})):i.createElement(h,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={},s="Service Scripts",o={unversionedId:"developer/Service_Scripts",id:"developer/Service_Scripts",title:"Service Scripts",description:"This document describes Terragraph's service scripts and some related utilities.",source:"@site/../docs/developer/Service_Scripts.md",sourceDirName:"developer",slug:"/developer/Service_Scripts",permalink:"/docs/developer/Service_Scripts",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/developer/Service_Scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"developerManualSidebar",previous:{title:"LED Agent",permalink:"/docs/developer/LED_Agent"},next:{title:"Watchdog",permalink:"/docs/developer/Watchdog"}},l={},p=[{value:"Cloud Services",id:"cloud-services",level:2},{value:"systemd scripts",id:"systemd-scripts",level:3},{value:"Node Services",id:"node-services",level:2},{value:"runit scripts",id:"runit-scripts",level:3},{value:"Initializing drivers, firmware, and interfaces",id:"initializing-drivers-firmware-and-interfaces",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"Custom startup scripts",id:"custom-startup-scripts",level:3},{value:"System time",id:"system-time",level:3},{value:"Syslog",id:"syslog",level:3},{value:"Log rotation",id:"log-rotation",level:3},{value:"Scripting Languages",id:"scripting-languages",level:2},{value:"Shell",id:"shell",level:3},{value:"Python",id:"python",level:3},{value:"Lua",id:"lua",level:3},{value:"Resources",id:"resources",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"service-scripts"},"Service Scripts"),(0,a.kt)("p",null,"This document describes Terragraph's service scripts and some related utilities."),(0,a.kt)("h2",{id:"cloud-services"},"Cloud Services"),(0,a.kt)("p",null,"Terragraph manages its cloud services on x86 hosts using ",(0,a.kt)("a",{parentName:"p",href:"https://www.freedesktop.org/wiki/Software/systemd/"},"systemd"),"."),(0,a.kt)("h3",{id:"systemd-scripts"},"systemd scripts"),(0,a.kt)("p",null,"All systemd scripts reside in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/tg_systemd_config/"),". The actual service\nscripts are expected to be installed on the host manually, while the start/stop\nscripts remain in the rootfs. More details about the systemd scripts can be\nfound in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/terragraph-e2e/systemd/README.md"),"."),(0,a.kt)("p",null,"The set of files used in each service is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/etc/tg_systemd_config/\n  <service>.service       - systemd service file (to be installed on host)\n  <service>.start         - start script\n  <service>.docker.start  - start script (when running in Docker container)\n  <service>.stop          - stop script\n")),(0,a.kt)("a",{id:"service-scripts-node-services"}),(0,a.kt)("h2",{id:"node-services"},"Node Services"),(0,a.kt)("p",null,"Services on Terragraph nodes are managed using ",(0,a.kt)("a",{parentName:"p",href:"http://smarden.org/runit/"},"runit"),"."),(0,a.kt)("a",{id:"service-scripts-runit-scripts"}),(0,a.kt)("h3",{id:"runit-scripts"},"runit scripts"),(0,a.kt)("p",null,"All runit scripts reside in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/sv/<service>/")," on the nodes. Most will run by\ndefault (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e_minion"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"openr"),"), some are disabled (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e_controller"),"),\nand others run only once after boot (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"pop_config"),"). Many of these scripts\ncan be enabled or disabled via node configuration; a common pattern in the ",(0,a.kt)("inlineCode",{parentName:"p"},"run"),'\nscripts is to sleep until seeing an "enabled" flag in the configuration.'),(0,a.kt)("p",null,"Logs from each service are written to ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/log/<service>/current")," and are\nautomatically rotated."),(0,a.kt)("p",null,"The basic directory structure for each service is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/etc/sv/<service>/\n  run     - start script\n  finish  - shutdown script\n  down    - if present, service is disabled by default\n  log/\n    run   - log script (executes svlogd)\n")),(0,a.kt)("p",null,"The runit framework is started via ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/init.d/runit")," (installed from\n",(0,a.kt)("inlineCode",{parentName:"p"},"recipes-utils/runit/files/runit.init"),"). Some noteworthy points are below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runsv")," needs to write to ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/sv/"),", but this is on a read-only partition. To\nhandle this, scripts are actually installed in ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/sv.bak/"),", then copied to\n",(0,a.kt)("inlineCode",{parentName:"li"},"/var/run/sv/")," during runtime. A symbolic link is created from ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/sv")," to\n",(0,a.kt)("inlineCode",{parentName:"li"},"/var/run/sv"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runsvdir")," is executed with ",(0,a.kt)("inlineCode",{parentName:"li"},"taskset")," to run all applications on the last\navailable core only.")),(0,a.kt)("h3",{id:"initializing-drivers-firmware-and-interfaces"},"Initializing drivers, firmware, and interfaces"),(0,a.kt)("p",null,"There are several scripts called when starting either ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e_minion")," (via\n",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/sbin/e2e_minion_wrapper.sh"),") or ",(0,a.kt)("inlineCode",{parentName:"p"},"driver_if_daemon")," (via\n",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/sbin/driver_if_start.sh"),"):"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"/usr/sbin/fb_tg_load_common.sh")," - Provides functions to run, stop, and\nrestart a service. The ",(0,a.kt)("inlineCode",{parentName:"li"},"_run")," function calls ",(0,a.kt)("inlineCode",{parentName:"li"},"fb_load_dr_fw.sh"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"/usr/bin/fb_load_dr_fw.sh")," - Provides a function to load the drivers and\nfirmware, then bring up link interfaces, among other things. This calls the\nvendor-specific script ",(0,a.kt)("inlineCode",{parentName:"li"},"fb_load_bh_drv.sh"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"/usr/bin/fb_load_bh_drv.sh"),' - Provides functions to load the wireless\n("backhaul") driver.')),(0,a.kt)("p",null,"A pair of helper scripts is provided to associate a point-to-point link using\n",(0,a.kt)("inlineCode",{parentName:"p"},"r2d2")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"driver_if_daemon"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/usr/bin/tfdn_r2d2.sh")," - Used on the initiator node"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/usr/bin/tfcn_r2d2.sh")," - Used on the responder node")),(0,a.kt)("a",{id:"service-scripts-environment-variables"}),(0,a.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,a.kt)("p",null,"Most environment variables are loaded in scripts via\n",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/sbin/config_get_env.sh"),", which exports fields in the ",(0,a.kt)("inlineCode",{parentName:"p"},"envParams")," node\nconfiguration structure. This will call ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/sbin/config_read_env")," to generate\nan intermediate file, ",(0,a.kt)("inlineCode",{parentName:"p"},"/data/cfg/config"),", as needed. If the node configuration\nfile (",(0,a.kt)("inlineCode",{parentName:"p"},"/data/cfg/node_config.json"),") does not yet exist or cannot be parsed, it\nis also generated in this process."),(0,a.kt)("p",null,"Additional vendor-specific environment variables, mostly relating to kernel\nmodules, are static and contained in ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin/tg.env"),"."),(0,a.kt)("p",null,"Hardware-related information is written to ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/run/node_info"),", which is\ngenerated at boot time by ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/init.d/gen_node_info_file.sh"),". The node info\nfile is required by several services (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e_minion"),"). Most fields in this\nfile are read from EEPROM. The file contents are as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'NODE_ID="node ID, must be a MAC address (ex. nic0 or wlan0)"\nTG_IF2IF="use IF2IF firmware files (0 or 1)"\nNUM_WLAN_MACS="number of radios"\nMAC_X="baseband MAC address X"\nBUS_X="PCI bus X"\nGPIO_X="GPIO X (default: -1)"\nNVRAM_X="NVRAM X (default: bottom_lvds)"\nPCI_ORDER="ordering of pci slots for interface indexing"\nHW_MODEL="hardware model string"\nHW_VENDOR="hardware vendor"\nHW_BOARD_ID="hardware board ID"\nHW_REV="hardware revision number"\nHW_BATCH="hardware batch number"\nHW_SN="hardware serial number"\n')),(0,a.kt)("p",null,"Note that on Puma hardware when using the PMD, the default MAC address is\n",(0,a.kt)("a",{parentName:"p",href:"/docs/developer/Driver_Stack#driver-stack-mac-address-assignment"},"read from OTP"),", and these\nusually do not match the fields in EEPROM (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"MAC_X")," above). Some services\nwill write and read a modified node info file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/node_info")," that contains\nthe correct WLAN MAC addresses."),(0,a.kt)("h3",{id:"custom-startup-scripts"},"Custom startup scripts"),(0,a.kt)("p",null,"User scripts can be executed as part of the boot sequence by placing them in\n",(0,a.kt)("inlineCode",{parentName:"p"},"/data/startup/"),". This is done via ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/init.d/data_startup.sh"),". For example,\nthe following lines may be helpful for development:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Disable software watchdog (to avoid unexpected reboots or service restarts)\nsource /etc/monit_config.sh\nmkdir -p "$progress_dir"\ndisable_all_tg_scripts\n\n# Make root writeable (if manually modifying files in read-only paths)\nmount -o remount, rw /\n')),(0,a.kt)("h3",{id:"system-time"},"System time"),(0,a.kt)("p",null,"For systems without an RTC module (ex. Puma), there may be several time jumps as\nthe system boots:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The system time is initialized using the ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/timestamp")," file. This file is\nwritten at build time during rootfs generation, and holds the build date\n(format: ",(0,a.kt)("inlineCode",{parentName:"li"},"+%4Y%2m%2d%2H%2M%2S"),")."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"chronyd")," time daemon runs via an ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/init.d/")," init script. This will\nsynchronize system time to NTP servers defined in node configuration\n(",(0,a.kt)("inlineCode",{parentName:"li"},"sysParams.ntpServers"),"), or ",(0,a.kt)("inlineCode",{parentName:"li"},"time.facebook.com")," by default. It will also use\nGPS/PPS as a time source if configured (",(0,a.kt)("inlineCode",{parentName:"li"},"envParams.GPSD_PPS_DEVICE"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"envParams.GPSD_NMEA_TIME_OFFSET"),"). Logs are written to ",(0,a.kt)("inlineCode",{parentName:"li"},"/var/log/chrony/"),"."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"time_set")," script runs via an ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/init.d/")," init script after at least 90\nseconds of system uptime. This attempts to run ",(0,a.kt)("inlineCode",{parentName:"li"},"chronyd -q")," (one-time clock\nstep, similar to ",(0,a.kt)("inlineCode",{parentName:"li"},"ntpdate"),") to NTP servers in the ",(0,a.kt)("inlineCode",{parentName:"li"},"oob")," (out-of-band) network\nnamespace. Logs are written to ",(0,a.kt)("inlineCode",{parentName:"li"},"/tmp/time_set.log"),".")),(0,a.kt)("h3",{id:"syslog"},"Syslog"),(0,a.kt)("p",null,"Nodes run the ",(0,a.kt)("inlineCode",{parentName:"p"},"rsyslogd")," daemon to configure system logging via\n",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/rsyslog.conf"),". Some standard files are disabled to save space. Note that\nany boot-time syslog messages are dropped if they are written before ",(0,a.kt)("inlineCode",{parentName:"p"},"rsyslogd"),"\nhas started (e.g. in the init.d sequence)."),(0,a.kt)("h3",{id:"log-rotation"},"Log rotation"),(0,a.kt)("p",null,"Log rotation is managed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"logrotate")," utility, and application-specific\nconfiguration is located in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/logrotate.d/")," directory. ",(0,a.kt)("inlineCode",{parentName:"p"},"logrotate")," is\ntriggered periodically via the cron job ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/cron.d/logrotate"),". Note that a\ndaily logrotate entry for ",(0,a.kt)("inlineCode",{parentName:"p"},"/data/log/logs.tar.gz")," will save an archive of\n",(0,a.kt)("inlineCode",{parentName:"p"},"/var/log/")," into the persistent ",(0,a.kt)("inlineCode",{parentName:"p"},"/data/")," directory."),(0,a.kt)("h2",{id:"scripting-languages"},"Scripting Languages"),(0,a.kt)("p",null,"The sections below briefly describe the scripting languages used in Terragraph\nand how they are set up."),(0,a.kt)("h3",{id:"shell"},"Shell"),(0,a.kt)("p",null,"Most included shell scripts are compliant with POSIX shell, but some require\nBash. Code is validated using ",(0,a.kt)("a",{parentName:"p",href:"https://www.shellcheck.net/"},"ShellCheck"),"."),(0,a.kt)("h3",{id:"python"},"Python"),(0,a.kt)("p",null,"Terragraph installs Python 3.8, with the interpreter at ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin/python3"),"\n(along with related links) and core/user packages at ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/lib/python3.8/"),". In\n",(0,a.kt)("inlineCode",{parentName:"p"},"terragraph-image-minimal"),", only ",(0,a.kt)("inlineCode",{parentName:"p"},".pyc")," files are kept (",(0,a.kt)("inlineCode",{parentName:"p"},".py")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".opt-*")," files\nare deleted)."),(0,a.kt)("p",null,"Code is auto-formatted with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/psf/black"},"Black")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/timothycrosley/isort"},"isort")," (config: ",(0,a.kt)("inlineCode",{parentName:"p"},".isort.cfg"),"), and is\nlinted using ",(0,a.kt)("a",{parentName:"p",href:"https://gitlab.com/pycqa/flake8"},"Flake8")," (config: ",(0,a.kt)("inlineCode",{parentName:"p"},".flake8"),"). Python tests are installed to\n",(0,a.kt)("inlineCode",{parentName:"p"},"terragraph-image-x86")," and run using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/ptr"},"ptr")," (config: ",(0,a.kt)("inlineCode",{parentName:"p"},".ptrconfig"),") via\n",(0,a.kt)("inlineCode",{parentName:"p"},"meta-x86/recipes-testing/ptr/files/run_ptr.sh"),"."),(0,a.kt)("p",null,"Python code is not critical for production. To exclude Python and all dependent\npackages from an image, build with ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/no-python.conf"),"."),(0,a.kt)("h3",{id:"lua"},"Lua"),(0,a.kt)("p",null,"Terragraph installs Lua 5.2, with all user scripts and dependencies captured in\n",(0,a.kt)("inlineCode",{parentName:"p"},"recipes-facebook/e2e/e2e-files-lua_0.1.bb"),". Library code is minified using\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stravant/LuaMinify"},"LuaMinify"),". The installed file structure is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/usr/bin/{lua,luac}             - Lua interpreter/compiler\n/usr/sbin/*.lua                 - user scripts\n/usr/sbin/tests/lua/*_test.lua  - unit tests (X86 only)\n/usr/lib/lua/5.2/               - library path (not /usr/share/lua/)\n/usr/lib/liblua*.so*            - Thrift .so libraries (others are in the standard library path)\n")),(0,a.kt)("p",null,"Code is validated using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpeterv/luacheck"},"Luacheck")," (config: ",(0,a.kt)("inlineCode",{parentName:"p"},".luacheckrc"),"). Code documentation\nis auto-generated using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stevedonovan/LDoc"},"LDoc")," (config: ",(0,a.kt)("inlineCode",{parentName:"p"},".config.ld"),"). Lua tests are written\nusing ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bluebird75/luaunit"},"LuaUnit")," and installed to ",(0,a.kt)("inlineCode",{parentName:"p"},"terragraph-image-x86"),"."),(0,a.kt)("p",null,"Note that user scripts are generally ",(0,a.kt)("em",{parentName:"p"},"not")," compatible with Lua 5.1/5.3+ or\nLuaJIT. However, they are mostly functional in Lua 5.1 after installing the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/keplerproject/lua-compat-5.2"},"compat52")," module (see ",(0,a.kt)("inlineCode",{parentName:"p"},"recipes-support/lua-compat52/lua-compat52_0.3.bb"),") and\nimporting it globally via ",(0,a.kt)("inlineCode",{parentName:"p"},'require("compat52")'),", for example at the beginning of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"tg.utils")," module (",(0,a.kt)("inlineCode",{parentName:"p"},"src/terragraph-e2e/lua/tg/utils.lua"),")."),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.freedesktop.org/wiki/Software/systemd/"},"systemd")," - Linux init system with service management"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://smarden.org/runit/"},"runit")," - UNIX init scheme with service supervision"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.shellcheck.net/"},"ShellCheck")," - Shell script static analyzer"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/psf/black"},"Black")," - Python code formatter"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/timothycrosley/isort"},"isort")," - Python import organizer"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gitlab.com/pycqa/flake8"},"Flake8")," - Python linter"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/ptr"},"ptr")," - Python test runner"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/stravant/LuaMinify"},"LuaMinify")," - Lua code minifier"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/mpeterv/luacheck"},"Luacheck")," - Lua static analyzer and linter"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/stevedonovan/LDoc"},"LDoc")," - Lua documentation generator"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bluebird75/luaunit"},"LuaUnit")," - Lua unit testing framework"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/keplerproject/lua-compat-5.2"},"compat52")," - Lua compatibility module providing Lua-5.2-style APIs for Lua 5.1")))}c.isMDXComponent=!0}}]);