"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(t),m=r,u=g["".concat(s,".").concat(m)]||g[m]||c[m]||o;return t?a.createElement(u,i(i({ref:n},p),{},{components:t})):a.createElement(u,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const o={},i="Maintenance and Configuration",l={unversionedId:"runbook/Maintenance",id:"runbook/Maintenance",title:"Maintenance and Configuration",description:"This document describes Terragraph's maintenance and configuration procedures.",source:"@site/../docs/runbook/Maintenance.md",sourceDirName:"runbook",slug:"/runbook/Maintenance",permalink:"/docs/runbook/Maintenance",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/runbook/Maintenance.md",tags:[],version:"current",frontMatter:{},sidebar:"runbookSidebar",previous:{title:"Deployment and Installation",permalink:"/docs/runbook/Deployment"},next:{title:"Monitoring and Alerting",permalink:"/docs/runbook/Monitoring"}},s={},d=[{value:"Software Upgrades",id:"software-upgrades",level:2},{value:"E2E Image",id:"e2e-image",level:3},{value:"Docker Swarm",id:"docker-swarm",level:4},{value:"Legacy",id:"legacy",level:4},{value:"NMS",id:"nms",level:3},{value:"Terragraph Nodes",id:"terragraph-nodes",level:3},{value:"Upgrading via NMS UI",id:"upgrading-via-nms-ui",level:4},{value:"Upgrading via TG CLI",id:"upgrading-via-tg-cli",level:4},{value:"Prepare",id:"prepare",level:5},{value:"Using BitTorrent",id:"using-bittorrent",level:6},{value:"Using HTTP",id:"using-http",level:6},{value:"Commit",id:"commit",level:5},{value:"Upgrade Status",id:"upgrade-status",level:5},{value:"Node Image Revert",id:"node-image-revert",level:4},{value:"Configuration Management",id:"configuration-management",level:2},{value:"Layered Config Model",id:"layered-config-model",level:3},{value:"Zero Config",id:"zero-config",level:3},{value:"PoP Node Config",id:"pop-node-config",level:3},{value:"CPE Config",id:"cpe-config",level:3},{value:"DHCPv6 Relay for CPE Provisioning",id:"dhcpv6-relay-for-cpe-provisioning",level:4},{value:"CPE Prefix Advertisement in BGP",id:"cpe-prefix-advertisement-in-bgp",level:4},{value:"Modifying Configuration",id:"modifying-configuration",level:3},{value:"NMS UI",id:"nms-ui",level:4},{value:"TG CLI",id:"tg-cli",level:4},{value:"Disabling Configuration Management",id:"disabling-configuration-management",level:3}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"maintenance-and-configuration"},"Maintenance and Configuration"),(0,r.kt)("p",null,"This document describes Terragraph's maintenance and configuration procedures."),(0,r.kt)("a",{id:"maintenance-upgrades"}),(0,r.kt)("h2",{id:"software-upgrades"},"Software Upgrades"),(0,r.kt)("p",null,"Terragraph software releases are tagged with major and minor versions, such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"M77")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"M77.1"),", respectively. Releases contain two separate parts - an E2E\nimage (x86) and a Terragraph node image. When performing software upgrades, the\nE2E controller ",(0,r.kt)("strong",{parentName:"p"},"must")," be upgraded before the Terragraph nodes to ensure proper\nbackwards compatibility."),(0,r.kt)("h3",{id:"e2e-image"},"E2E Image"),(0,r.kt)("p",null,"The E2E image contains the cloud software, which includes the E2E controller,\nNMS aggregator, and API service."),(0,r.kt)("h4",{id:"docker-swarm"},"Docker Swarm"),(0,r.kt)("p",null,"Upgrading to a new E2E release requires running the ",(0,r.kt)("inlineCode",{parentName:"p"},"nms")," installer with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"upgrade")," command on the installation host used to initially deploy the Docker\nSwarm. The upgrade command takes the controller name (as specified in\n",(0,r.kt)("inlineCode",{parentName:"p"},"config.yml"),") and the new image version as arguments. As part of the upgrade,\nE2E files in ",(0,r.kt)("inlineCode",{parentName:"p"},"/data")," may be migrated if necessary. For example, the following\ncommand upgrades (or downgrades) the E2E controller to M78:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./nms upgrade -f config.yml -c "<controller_name>" \\\n    -i "secure.cxl-terragraph.com:443/e2e-controller:M78" \\\n    -h tg-docker-host-01 [-h tg-docker-host-2] [-h tg-docker-host-03]\n')),(0,r.kt)("h4",{id:"legacy"},"Legacy"),(0,r.kt)("p",null,"When using the legacy deployment with systemd, the release file itself is a\ntarball (.tar.gz) of the chroot BusyBox image containing the Terragraph\nfilesystem. Upgrading to a new release involves extracting the new filesystem,\nstopping old software processes, and running the new binaries."),(0,r.kt)("p",null,"The following steps outline the E2E controller upgrade process (using M77 > M78\nas an example):"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Extract the release image to a new directory.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir /opt/rootfs_m78\n$ tar -xvzf e2e_image-x86-x86.tar.gz -C /opt/rootfs_m78\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Run the E2E data migration script, which will modify any files if necessary.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ chroot /opt/rootfs_m78 /usr/sbin/migrate_e2e_data --from_ver 77\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Update the ",(0,r.kt)("inlineCode",{parentName:"li"},"tg_services")," file with the new image directory by setting the\n",(0,r.kt)("inlineCode",{parentName:"li"},"E2E_ROOTFS")," variable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ vim /etc/default/tg_services  # or /etc/sysconfig/tg_services\nE2E_ROOTFS="/opt/rootfs_m78"\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Restart the systemd service ",(0,r.kt)("inlineCode",{parentName:"li"},"e2e_controller"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ systemctl restart e2e_controller\n")),(0,r.kt)("p",null,"Repeat steps 3 and 4 with the following changes to upgrade the NMS aggregator\nand API service:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NMS aggregator")," - Edit the ",(0,r.kt)("inlineCode",{parentName:"li"},"tg_services")," variable ",(0,r.kt)("inlineCode",{parentName:"li"},"NMS_ROOTFS")," and restart\nthe service ",(0,r.kt)("inlineCode",{parentName:"li"},"nms_aggregator"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"API service")," - Edit the ",(0,r.kt)("inlineCode",{parentName:"li"},"tg_services")," variable ",(0,r.kt)("inlineCode",{parentName:"li"},"API_ROOTFS")," and restart the\nservice ",(0,r.kt)("inlineCode",{parentName:"li"},"api_service"),".")),(0,r.kt)("h3",{id:"nms"},"NMS"),(0,r.kt)("p",null,"Upgrading Terragraph NMS in the Docker Swarm requires running the ",(0,r.kt)("inlineCode",{parentName:"p"},"nms"),"\ninstaller with the ",(0,r.kt)("inlineCode",{parentName:"p"},"nms")," tag on the installation host used to initially deploy\nthe Docker Swarm. The following command upgrades all the Terragraph NMS services\nto their latest versions. Note that only one host is required to upgrade the\nTerragraph NMS services."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./nms install -f config.yml -h tg-docker-host-01 -t nms\n")),(0,r.kt)("h3",{id:"terragraph-nodes"},"Terragraph Nodes"),(0,r.kt)("p",null,'Terragraph node upgrades consist of two phases - "prepare" and "commit". In the\n"prepare" phase, the controller distributes the new software image to nodes,\nover either BitTorrent or HTTP. Once completed, the nodes will flash the new\nimage onto a secondary disk partition. The "commit" command instructs nodes to\nreboot to the newly-written partition.'),(0,r.kt)("p",null,"The E2E minion will periodically report its upgrade status to the controller.\nThese statuses are provided below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NONE")),(0,r.kt)("td",{parentName:"tr",align:null},"An upgrade is not taking place, or the previous upgrade status was lost due to a reboot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DOWNLOADING_IMAGE")),(0,r.kt)("td",{parentName:"tr",align:null},"The image download is in progress.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DOWNLOAD_FAILED")),(0,r.kt)("td",{parentName:"tr",align:null},"The image download failed or could not be started, or the downloaded image could not be verified.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FLASHING_IMAGE")),(0,r.kt)("td",{parentName:"tr",align:null},"The image flashing is in progress.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FLASH_FAILED")),(0,r.kt)("td",{parentName:"tr",align:null},"The image could not be flashed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FLASHED")),(0,r.kt)("td",{parentName:"tr",align:null},'The image was successfully flashed, and the node is ready for a "commit".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"COMMIT_FAILED")),(0,r.kt)("td",{parentName:"tr",align:null},'The "commit" command could not be executed.')))),(0,r.kt)("p",null,"Upgrades can be done either through the NMS UI or using the TG CLI. Instructions\nfor each are given below."),(0,r.kt)("h4",{id:"upgrading-via-nms-ui"},"Upgrading via NMS UI"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select the ",(0,r.kt)("strong",{parentName:"p"},"Upgrade")," icon from the left-hand toolbar."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/upgrades_status.png",width:"1000"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Manage Upgrade Images")," to view all available images. If the new\nimage is already present in this list, then skip the next step.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Upload Binary")," and locate the image file. After the upload finishes,\nverify that the image appears in the list (this may take a few seconds) and\nclose the modal."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/upgrades_upload.png",width:"512"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select the nodes to upgrade in the table, then click ",(0,r.kt)("strong",{parentName:"p"},"Prepare")," on the\ntop-right of the nodes table."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/upgrades_status_select.png",width:"1000"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Verify that the correct nodes appear in the ",(0,r.kt)("strong",{parentName:"p"},"Nodes to prepare for upgrade"),"\nlist, then select the image to upgrade via the dropdown menu and click\n",(0,r.kt)("strong",{parentName:"p"},"Submit"),'. This will issue a "prepare" request to the E2E controller, which\ninstructs the selected nodes to start the "prepare" process. The whole\nprocess may take up to a few minutes to complete, depending on the size of\nthe network. The current upgrade status of each node is shown on the same\npage.'),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/upgrades_prepare.png",width:"512"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The upgrade status on each node will change to ",(0,r.kt)("inlineCode",{parentName:"p"},"FLASHED"),' after the "prepare"\nstep succeeds, and "Next Version" should reflect the newly flashed image.\nSelect these nodes again (if not already selected), and click ',(0,r.kt)("strong",{parentName:"p"},"Commit"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'Verify that the correct nodes appear in the "Nodes to commit for upgrade"\nlist, then click ',(0,r.kt)("strong",{parentName:"p"},"Submit"),'. This will issue a "commit" request to the E2E\ncontroller which in turn will order the nodes to reboot in a coordinated\nmanner that minimizes network disruption.'),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/upgrades_commit.png",width:"512"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The upgrade status on each node will change to ",(0,r.kt)("inlineCode",{parentName:"p"},"NONE"),' after the node comes\nback online, and the "Image Version" should reflect the new image.'))),(0,r.kt)("p",null,"An upgrade procedure can be cancelled at any time by clicking ",(0,r.kt)("strong",{parentName:"p"},"Abort"),"."),(0,r.kt)("h4",{id:"upgrading-via-tg-cli"},"Upgrading via TG CLI"),(0,r.kt)("h5",{id:"prepare"},"Prepare"),(0,r.kt)("p",null,"The E2E controller can distribute the image either via BitTorrent (recommended)\nor HTTP."),(0,r.kt)("h6",{id:"using-bittorrent"},"Using BitTorrent"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Provide a URL for the controller to download the image.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade torrent add_image -u <image_url>\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"After the controller has downloaded the image, find its magnet URL and MD5\nhash.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade torrent list_images\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},'Issue a "prepare" command.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Prepare all nodes in the network\n$ tg upgrade network prepare_torrent -m <magnet_url> --md5 <md5_hash>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Prepare a subset of nodes in the network\n# -n, --names TEXT  Node name list (separated by ,)\n$ tg upgrade node -n <node_names> prepare_torrent -m <magnet_url> --md5 <md5_hash>\n")),(0,r.kt)("h6",{id:"using-http"},"Using HTTP"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Provide a URL for the nodes to download the image. If needed, an HTTP server\ncan be started on the current host with the following command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade launch_server -g <interface_name> -s <port_number> -i <image_file_path>\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},'Issue a "prepare" command to all nodes.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade network prepare -i <http_url>\n")),(0,r.kt)("h5",{id:"commit"},"Commit"),(0,r.kt)("p",null,'Issue a "commit" command to all nodes.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade network commit\n")),(0,r.kt)("p",null,"All nodes will reboot to the new image in an order that minimizes network\ndisruption."),(0,r.kt)("h5",{id:"upgrade-status"},"Upgrade Status"),(0,r.kt)("p",null,"The upgrade status on all nodes can be monitored using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tg upgrade state all\n")),(0,r.kt)("h4",{id:"node-image-revert"},"Node Image Revert"),(0,r.kt)("p",null,"Terragraph nodes will automatically revert to the previous image version if an\nupgrade causes a critical failure. The revert process is triggered if the node's\nE2E minion cannot contact the controller after six minutes. If this happens, the\nnode will reboot into the partition it was using before the last upgrade was\ncommitted."),(0,r.kt)("a",{id:"maintenance-config"}),(0,r.kt)("h2",{id:"configuration-management"},"Configuration Management"),(0,r.kt)("p",null,'Terragraph implements a centralized configuration management architecture in\nwhich the E2E controller serves as the single point of truth for configurations\nin the network. After establishing communication with the E2E controller,\nTerragraph nodes report a hash of their local configuration file and the\ncontroller automatically pushes configuration changes to the nodes upon seeing\nany mismatches. This automatic configuration sync can be disabled by\n"un-managing" the entire network or parts of it.'),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/figures/config_architecture.svg",width:"500"})),(0,r.kt)("p",null,"Node configuration is a JSON-serialized Thrift structure. All config files are\nstored under the ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/cfg/")," directory for both the E2E controller and\nTerragraph node."),(0,r.kt)("h3",{id:"layered-config-model"},"Layered Config Model"),(0,r.kt)("p",null,"Terragraph follows a layered configuration model, where each node's\nconfiguration is computed by applying the following layers in order:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Base configuration")," - The default configuration, which is tied to a\nspecific software version and is included as part of the image.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/etc/e2e_config/base_versions/RELEASE_M78.json\n{\n  "envParams": {...},\n  "kvstoreParams": {...},\n  "sysParams": {...},\n  ...\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Firmware-specific base configuration")," - The default configuration tied to a\nspecific firmware version, which is also included as part of the image. Values\nare applied on top of the initial base configuration layer.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/etc/e2e_config/base_versions/fw_versions/10.11.0.json\n{\n  "linkParamsBase": {\n    "fwParams": {\n      ...\n    }\n  },\n  "radioParamsBase": {\n    "fwParams": {\n      ...\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hardware-specific base configuration")," - The default configuration tied to a\nspecific hardware type, which is also included as part of the image. Each\nhardware type supplies configuration that changes with software versions.\nValues are applied on top of the firmware base configuration layer. The\nmapping between hardware types and hardware board IDs is defined in\n",(0,r.kt)("inlineCode",{parentName:"li"},"/etc/e2e_config/base_versions/hw_versions/hw_types.json"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/etc/e2e_config/base_versions/hw_versions/NXP/RELEASE_M78.json\n{\n  "envParams": {\n    "DPDK_ENABLED": "1",\n    "GPSD_DEVICE": "/dev/ttyS1",\n    ...\n  },\n  ...\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automated node overrides")," - Contains any configuration parameters for\nspecific nodes that were automatically set by the E2E controller.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"/data/cfg/auto_node_config_overrides.json\n{}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Network overrides")," - Contains any configuration parameters that should be\nuniformly overridden across the entire network. This takes precedence over the\nbase configuration and automatic overrides.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/data/cfg/network_config_overrides.json\n{\n  "sysParams": {\n    "managedConfig": true\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Node overrides")," - Contains any configuration parameters that should be\noverridden only on specific nodes (e.g. PoP nodes). This takes precedence over\nthe network overrides.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/data/cfg/node_config_overrides.json\n{\n  "node-name-1": {\n    "cpeConfig": {\n      "nic1": {\n        "prefix": "2001::/64"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The E2E controller manages and stores the separate configuration layers.\nTerragraph nodes have no knowledge of these layers (aside from the base\nconfiguration in the image) and store the full, combined config structure in\n",(0,r.kt)("inlineCode",{parentName:"p"},"/data/cfg/node_config.json"),"."),(0,r.kt)("h3",{id:"zero-config"},"Zero Config"),(0,r.kt)("p",null,"Terragraph operates under the premise of zero config. That is, a Terragraph node\nshould be able to communicate with E2E controller out of the box (excluding the\nfirst PoP node). Note that this does ",(0,r.kt)("em",{parentName:"p"},"not")," mean that nodes never need\nconfiguration."),(0,r.kt)("a",{id:"maintenance-pop-node-config"}),(0,r.kt)("h3",{id:"pop-node-config"},"PoP Node Config"),(0,r.kt)("p",null,"PoP nodes have special configuration parameters that enable them to route\ntraffic in and out of the network. PoP nodes are typically also responsible for\ninjecting values into the Open/R key-value store, which distributes them to all\nnodes in the network. A sample node overrides section for a PoP node is shown\nbelow."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'/data/cfg/node_config_overrides.json\n{\n  "pop-node-name": {\n    "bgpParams": {\n      "localAsn": 64675,\n      "neighbors": {\n        "0": {\n          "asn": 64674,\n          "ipv6": "2001::2"\n        },\n        "1": {\n          "asn": 64674,\n          "ipv6": "2001::3",\n          "maximumPrefixes": 64\n        }\n      },\n      "keepalive": 10,\n      "cpeNetworkPrefix": "3001::/56",\n      "delegatedNetworkPrefixes": "3001:0:0:0010::/60,3001:0:0:0020::/60",\n      "cpePrefixesAutoAdvertisement": true,\n      "allowNonDefaultRoutes": false\n    },\n    "kvstoreParams": {\n      "e2e-aggr-url": "tcp://[3001::1]:8002",\n      "e2e-ctrl-url": "tcp://[3001::1]:7007",\n      "e2e-network-prefix": "3001::/56,64"\n    },\n    "popParams": {\n      "POP_ADDR": "2001::10",\n      "POP_ADDR_PREFIX_LEN": "64",\n      "POP_BGP_ROUTING": "1",\n      "POP_IFACE": "nic2"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If the controller is running in High Availability (HA) mode, an additional key\n",(0,r.kt)("inlineCode",{parentName:"p"},"kvstoreParams.e2e-ctrl-url-backup")," should contain the URL for the backup\ncontroller."),(0,r.kt)("p",null,"Note that configuration of the first PoP node in the network involves some\nadditional steps, since connectivity to the E2E controller has not yet been\nestablished. Please refer to the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/runbook/Deployment#deployment-first-pop-configuration"},"First PoP Configuration"),"\nsection for details."),(0,r.kt)("h3",{id:"cpe-config"},"CPE Config"),(0,r.kt)("p",null,"CPE interfaces on CNs and DNs need a unique IPv6 prefix for CPE devices to get\nconnected. The IPv6 prefix can be either manually assigned or automatically\nderived based on node prefix (refer to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/runbook/Routing#routing-cpe-prefix-alloc"},"CPE Prefix Allocation")," for details).\nSLAAC and Router Advertisement are configured on CPE interfaces automatically\nto enable prefix assignment for CPE devices. DHCPv6 prefix allocation for CPE\ndevices is also supported through a DHCP relay. Please note that L2 tunnels\n(SRv6, VxLAN), if enabled, are terminated at the CPE interfaces. On Puma, a\nnode can have up to 4 CPE interfaces, each with its own prefix. A sample node\nconfiguration with multiple CPE interfaces is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "cpeConfig": {\n    "TenGigabitEthernet0": {\n      "prefix": "2001:0:0:a000::/64"\n    },\n    "TenGigabitEthernet1": {\n      "prefix": "2001:0:0:b000::/64"\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"dhcpv6-relay-for-cpe-provisioning"},"DHCPv6 Relay for CPE Provisioning"),(0,r.kt)("p",null,"In addition to SLAAC, Terragraph supports DHCPv6 relay in VPP mode for CPE\nprefix provisioning. CPE devices connecting to a CN/DN can be provisioned via a\ncentral DHCPv6 server running on a different subnet from the Terragraph network.\nDHCPv6 relays can be enabled per CPE interface. The CPE devices communicate to\nthe DHCPv6 relay using the multicast DHCP address ",(0,r.kt)("inlineCode",{parentName:"p"},"ff02::1:2")," and the DHCPv6\nrelay forwards these packets to the central DHCP server, using the CPE interface\nprefix as the source address. The DHCPv6 relay implementation also optionally\ninserts Remote ID (37) and Subscriber ID (38) DHCPv6 options to relay packets\nsent to the DHCP server. The DHCPv6 relay automatically learns the assigned\nDHCPv6 addresses and add/deletes these addresses to Open/R and VPP FIB for\nproper forwarding of all packets to/from CPE devices. A sample DHCPv6 relay\nconfiguration is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "cpeConfig": {\n    "TenGigabitEthernet0": {\n      "prefix": "2001:0:0:a000::/64",\n      "dhcpRelay": {\n        "enabled": true,\n        "dhcpServerIp": "2001:0:0:b001",\n        "dhcpOptionRemoteId": true,\n        "dhcpOptionSubscriberId": true,\n        "enterpriseId": 12345\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"cpe-prefix-advertisement-in-bgp"},"CPE Prefix Advertisement in BGP"),(0,r.kt)("p",null,"CPE prefixes (",(0,r.kt)("inlineCode",{parentName:"p"},"cpeConfig.TenGigabitEthernetX.prefix"),") that are configured on CNs\nand DNs are automatically distributed to the entire Terragraph network by\nOpen/R's KvStore. If BGP automatic advertisement is enabled\n(",(0,r.kt)("inlineCode",{parentName:"p"},"bgpParams.cpePrefixesAutoAdvertisement"),") on PoP nodes, these CPE prefixes are\nlearned by ExaBGP and dynamically advertised via BGP to upstream routers from\neach PoP node. If the connections to CNs/DNs are down or the CPE interface is\ndown, the CPE prefixes will automatically be withdrawn from Open/R and BGP. For\nzoned Terragraph networks that use Deterministic Prefix Allocation (DPA), only\nthe CPE prefixes belonging to a particular PoP's zone are advertised. For all\nother prefix allocation schemes, the CPE prefixes from the entire Terragraph\nnetwork are advertised to BGP."),(0,r.kt)("p",null,"In addition, static CPE prefixes can be passed through\n",(0,r.kt)("inlineCode",{parentName:"p"},"bgpParams.cpeNetworkPrefix")," for BGP advertisement, and these will always be\nadvertised irrespective of reachability of CNs/DNs or CPE interfaces."),(0,r.kt)("h3",{id:"modifying-configuration"},"Modifying Configuration"),(0,r.kt)("p",null,"Network and node overrides can be viewed and modified using either the NMS UI or\nthe TG CLI. Instructions for each are given below."),(0,r.kt)("h4",{id:"nms-ui"},"NMS UI"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select the ",(0,r.kt)("strong",{parentName:"p"},"Node Config"),' icon from the left-hand toolbar. The "Network" and\n"Node" tabs on the top bar switch between network overrides and node\noverrides. Additional options are located in the left-hand column.'),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/config_network.png",width:"1000"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'To change a config value, find it in the table and click on the row to expand\nit. Enter the new value on the rightmost column and click "Save", or remove\nthe override using the button under it. To add a new field, click the "+"\nbutton on the bottom-right.'),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/config_edit.png",width:"1000"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Submit")," to review all pending changes, and click ",(0,r.kt)("strong",{parentName:"p"},"Submit")," again to\npublish them to the controller."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/nms/config_submit.png",width:"720"})))),(0,r.kt)("h4",{id:"tg-cli"},"TG CLI"),(0,r.kt)("p",null,"The commands to retrieve and modify configuration are shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Get network overrides\n$ tg config get network overrides\n\n# Get node overrides for all or a specific node\n$ tg config get node overrides\n$ tg config get node -n <node_name> overrides\n\n# Modify network or node overrides\n#  -i, --add_int_val <TEXT INTEGER>  Add integer key-value pairs\n#  -s, --add_str_val <TEXT TEXT>     Add string key-value pairs\n#  -b, --add_bool_val <TEXT BOOLEAN> Add boolean key-value pairs\n#  -d, --delete_key TEXT             Delete existing key\n$ tg config modify network -b sysParams.managedConfig true\n$ tg config modify node -n <node_name> -s popParams.POP_IFACE "nic2"\n\n# Get base config for a all or a specific software version\n$ tg config get base\n$ tg config get base -v RELEASE_M61\n\n# Get full node config as computed by e2e controller\n#  -v, --version TEXT  Base software version to use  [required]\n#  -o, --output TEXT   Output file path to write the config JSON\n$ tg config get node -n <node_name> full -v RELEASE_M61\n')),(0,r.kt)("h3",{id:"disabling-configuration-management"},"Disabling Configuration Management"),(0,r.kt)("p",null,"The E2E controller can be configured not to actively manage a node's\nconfiguration so that nothing occurs upon a config hash mismatch. This is\naccomplished via a special configuration field, shown below, that can be\noverridden for the entire network or individual nodes (using the same procedure\nas described above)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sysParams": {\n    "managedConfig": true\n  }\n}\n')),(0,r.kt)("p",null,"Note that active management is ",(0,r.kt)("em",{parentName:"p"},"disabled")," by default, but should normally be\nenabled as a network override. However, the operator might opt for disabling\nactive configuration management to allow for certain types of maintenance or\ntroubleshooting. The operator might also be instructed to disable this feature\nwhen upgrading the E2E controller if extra steps are needed to support backwards\ncompatibility."))}c.isMDXComponent=!0}}]);