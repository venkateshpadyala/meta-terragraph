"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=a,f=u["".concat(p,".").concat(c)]||u[c]||s[c]||i;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const i={},l="Firmware Versioning",o={unversionedId:"developer/Firmware_Versioning",id:"developer/Firmware_Versioning",title:"Firmware Versioning",description:"This document summarizes the versioning scheme for Terragraph's wireless",source:"@site/../docs/developer/Firmware_Versioning.md",sourceDirName:"developer",slug:"/developer/Firmware_Versioning",permalink:"/docs/developer/Firmware_Versioning",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/developer/Firmware_Versioning.md",tags:[],version:"current",frontMatter:{},sidebar:"developerManualSidebar",previous:{title:"Release Conventions",permalink:"/docs/developer/Release_Conventions"}},p={},m=[{value:"QTI Firmware",id:"qti-firmware",level:2},{value:"Version Numbers",id:"version-numbers",level:3},{value:"Release Packages",id:"release-packages",level:3},{value:"Terragraph Layout",id:"terragraph-layout",level:3}],d={toc:m};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"firmware-versioning"},"Firmware Versioning"),(0,a.kt)("p",null,"This document summarizes the versioning scheme for Terragraph's wireless\nfirmware."),(0,a.kt)("h2",{id:"qti-firmware"},"QTI Firmware"),(0,a.kt)("p",null,"The section below is specific to QTI (Qualcomm Technologies Inc.) wireless\nfirmware."),(0,a.kt)("h3",{id:"version-numbers"},"Version Numbers"),(0,a.kt)("p",null,"QTI firmware releases are tied to a specific Terragraph software release.\nSee the table below for information about some past firmware releases."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"FW Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Marketing Name"),(0,a.kt)("th",{parentName:"tr",align:null},"TG Version"),(0,a.kt)("th",{parentName:"tr",align:null},"TG Branch"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.99"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample R2 (DPDK-OEMR2-CSU4)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.21"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.92"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample R2 (DPDK-OEMR2-CSU3)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.20"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.87"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample R2 (DPDK-OEMR2-CSU2)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.19"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.83"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample R2 (DPDK-OEMR2-CSU)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.18"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.77"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample R2 (DPDK-OEMR2-CS)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.17"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.70"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample Update 2 (DPDK-CSU2)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.17"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.66"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample Update (DPDK-CSU)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.16"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.59"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Consumer Sample (DPDK-CS)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.16"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.55"),(0,a.kt)("td",{parentName:"tr",align:null},"DPDK Engineering Sample (DPDK-ES)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.15"),(0,a.kt)("td",{parentName:"tr",align:null},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.28"),(0,a.kt)("td",{parentName:"tr",align:null},"Consumer Sample Update (CSU)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.12"),(0,a.kt)("td",{parentName:"tr",align:null},"integration/m44/cs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.11.x.9"),(0,a.kt)("td",{parentName:"tr",align:null},"Commercial Sample (CS)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.11"),(0,a.kt)("td",{parentName:"tr",align:null},"integration/m44/cs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.9.x.y"),(0,a.kt)("td",{parentName:"tr",align:null},"Feature Complete (FC)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.11"),(0,a.kt)("td",{parentName:"tr",align:null},"integration/m44/fc")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10.7.x.y"),(0,a.kt)("td",{parentName:"tr",align:null},"Engineering Sample (ES)"),(0,a.kt)("td",{parentName:"tr",align:null},"M44.8"),(0,a.kt)("td",{parentName:"tr",align:null},"integration/m44/es")))),(0,a.kt)("p",null,"The firmware version string can be extracted as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ /usr/sbin/get_fw_version\n10.11.0.92\n\n$ strings /lib/firmware/wil6436.fw | grep version\nFW version: 10.11.0.92\n")),(0,a.kt)("p",null,"Within each QTI release, there is a separate firmware version with format\n",(0,a.kt)("inlineCode",{parentName:"p"},"major.minor.sub_minor.build")," (as defined in\n",(0,a.kt)("inlineCode",{parentName:"p"},"meta-qca/recipes-radio/wigig-utils-private/files/fw_ver.ini"),"). The ",(0,a.kt)("inlineCode",{parentName:"p"},"build"),"\nnumber is incremented on each change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"major.minor")," release. ",(0,a.kt)("inlineCode",{parentName:"p"},"sub_minor"),"\ncan take the following values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"0 - Operational (RF), 1 - WMI_ONLY, 2 - NO_PCIE, 3 - WMI_ONLY_NO_PCIE, 4 - IF2IF\n")),(0,a.kt)("p",null,"For example, the DPDK-OEMR2-CSU3 release contains RF firmware\n(",(0,a.kt)("inlineCode",{parentName:"p"},"TALYN_M_B0/wil6210.fw"),") with version 10.11.0.92, and IF2IF firmware\n(",(0,a.kt)("inlineCode",{parentName:"p"},"TALYN_M_B0_IF2IF/wil6210.fw"),") with version 10.11.4.92."),(0,a.kt)("h3",{id:"release-packages"},"Release Packages"),(0,a.kt)("p",null,"Releases from QTI contain several packages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OEMs receive ",(0,a.kt)("inlineCode",{parentName:"li"},"device"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"3pp"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"tg-src"),"."),(0,a.kt)("li",{parentName:"ul"},"Meta additionally receives ",(0,a.kt)("inlineCode",{parentName:"li"},"fb-src"),".")),(0,a.kt)("p",null,"The contents include, among other things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A firmware binary (",(0,a.kt)("inlineCode",{parentName:"li"},"wil6210.fw"),") for each ",(0,a.kt)("inlineCode",{parentName:"li"},"sub_minor")," type."),(0,a.kt)("li",{parentName:"ul"},"A set of corresponding board files (",(0,a.kt)("inlineCode",{parentName:"li"},"*.brd"),") for each firmware binary. The\ndefault for QRP (QTI Reference Platform) is named ",(0,a.kt)("inlineCode",{parentName:"li"},"wil6436.brd"),", which is\na copy of another board file in the same directory."),(0,a.kt)("li",{parentName:"ul"},"Firmware strings (",(0,a.kt)("inlineCode",{parentName:"li"},"fw_image_trace_string_load.bin"),") required for decoding\nfirmware logs using any of the provided tools (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"host_manager_11ad"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"wil_fw_trace"),"). The strings are only available under special license from\nQTI.")),(0,a.kt)("h3",{id:"terragraph-layout"},"Terragraph Layout"),(0,a.kt)("p",null,"On the Terragraph software image, the files mentioned above are installed to\n",(0,a.kt)("inlineCode",{parentName:"p"},"/lib/firmware"),", with additional links created as follows (using the Puma\nplatform as an example):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[read-only]\n/lib/firmware/\n  wil6436.fw -> TALYN_M_B0/wil6210.fw             # default RF firmware\n  wil6436.brd -> TALYN_M_B0/<production_*>.brd    # "golden" board file\n  TALYN_M_B0/\n    wil6436_puma.brd -> ./<production_*>.brd      # Puma default RF board file\n  TALYN_M_B0_IF2IF/\n    wil6436_puma.brd -> ./<production_*>.brd      # Puma default IF2IF board file\n\n[read-write]\n/data/firmware/wil6210/                           # firmware_class.path\n  fw_image_trace_string_load.bin -> /lib/firmware/<TALYN_M_B0*>/fw_image_trace_string_load.bin\n  ucode_image_trace_string_load.bin -> /lib/firmware/<TALYN_M_B0*>/ucode_image_trace_string_load.bin\n  wil6436.fw -> /lib/firmware/<TALYN_M_B0*>/wil6210.fw\n  wil6436.brd -> /lib/firmware/<TALYN_M_B0*>/wil6436_puma.brd\n')),(0,a.kt)("p",null,"The driver searches for firmware and board files in ",(0,a.kt)("inlineCode",{parentName:"p"},"/data/firmware/wil6210"),"\nfirst (as specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"firmware_class.path"),"), then in ",(0,a.kt)("inlineCode",{parentName:"p"},"/lib/firmware"),". The\nread-write path enables run-time switching of firmware and board files, e.g. to\nswap between RF and IF2IF operation. Much of this logic is handled in\n",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin/fw_brd_update.sh"),"."),(0,a.kt)("p",null,"When searching for board files, the driver first looks for the file\n",(0,a.kt)("inlineCode",{parentName:"p"},"<root>/<pci_id>/wil6436.brd"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"<root>/wil6436.brd"),'. The former enables the\nuse of "native" board files calibrated for each per baseband card (in RF mode\nonly), whereas the latter represents the "golden" board file used as a fallback.'),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"envParams.FW_USE_NATIVE_BOARDFILE"),' is set to "1" in the node\nconfiguration, then "native" board files are loaded from EEPROM via\n',(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin/bb_fetch_brdfile.sh")," and are installed by ",(0,a.kt)("inlineCode",{parentName:"p"},"fw_brd_update.sh")," as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[read-write]\n/data/firmware/\n  wil6210/\n    <pci_id0>/\n      wil6436.brd       # board file for PCI slot pci_id0\n    <pci_id1>/\n      wil6436.brd       # board file for PCI slot pci_id1\n    ...\n  native -> ./wil6210   # link for compability with bb_fetch_brdfile.sh\n")))}s.isMDXComponent=!0}}]);