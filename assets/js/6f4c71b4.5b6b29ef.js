"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1024],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,u=d["".concat(p,".").concat(h)]||d[h]||m[h]||i;return n?a.createElement(u,l(l({ref:t},c),{},{components:n})):a.createElement(u,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},872:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},l="High Availability",o={unversionedId:"developer/High_Availability",id:"developer/High_Availability",title:"High Availability",description:"This document describes the high-availability protocol used by the E2E",source:"@site/../docs/developer/High_Availability.md",sourceDirName:"developer",slug:"/developer/High_Availability",permalink:"/docs/developer/High_Availability",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/developer/High_Availability.md",tags:[],version:"current",frontMatter:{},sidebar:"developerManualSidebar",previous:{title:"Watchdog",permalink:"/docs/developer/Watchdog"},next:{title:"Security",permalink:"/docs/developer/Security"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Protocol",id:"protocol",level:2},{value:"Finite State Machine",id:"finite-state-machine",level:3},{value:"Split-Brain",id:"split-brain",level:4},{value:"Automatic Recovery",id:"automatic-recovery",level:4},{value:"Exceptional States",id:"exceptional-states",level:4},{value:"Data Synchronization",id:"data-synchronization",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Controller",id:"controller",level:3},{value:"Minion",id:"minion",level:3},{value:"Usage",id:"usage",level:2},{value:"Controller Configuration",id:"controller-configuration",level:3},{value:"Viewing Runtime State",id:"viewing-runtime-state",level:3},{value:"Upgrade Procedure",id:"upgrade-procedure",level:3},{value:"Resources",id:"resources",level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"high-availability"},"High Availability"),(0,r.kt)("p",null,"This document describes the high-availability protocol used by the E2E\ncontroller."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The controller supports a high-availability configuration using a primary-backup\nprotocol, loosely based on the ",(0,r.kt)("a",{parentName:"p",href:"http://zguide.zeromq.org/php:chapter4#High-Availability-Pair-Binary-Star-Pattern"},"Binary Star Pattern"),'. In this setup, two\ncontrollers (or "peers") are run on separate machines, and are designated as\neither "primary" or "backup". If the primary catastrophically fails (e.g. power\noutage, network failure, hardware failure), the backup will assume control of\nthe Terragraph network.'),(0,r.kt)("p",null,"These are the major components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The underlying ",(0,r.kt)("em",{parentName:"li"},"finite state machine (FSM)"),", determining each controller's\nstate in response to events (either receiving the peer's state or a client\nrequest). This state machine is defined within ",(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarFsm"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"FSM driver")," for heartbeating between peers and passing events to the\nstate machine. This is done jointly by ",(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarApp")," and the controller's\n",(0,r.kt)("inlineCode",{parentName:"li"},"Broker"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"data synchronization layer"),", which syncs persistent controller data\n(e.g. node configuration, network topology) from the active to passive\ncontroller. This is done in ",(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarApp"),", with handlers in the associated\napps."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"client layer"),", which switches between the primary and backup controllers\nwhenever its current connection times out. This logic is handled by the\nminion's ",(0,r.kt)("inlineCode",{parentName:"li"},"Broker"),".")),(0,r.kt)("h2",{id:"protocol"},"Protocol"),(0,r.kt)("h3",{id:"finite-state-machine"},"Finite State Machine"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:"/figures/bstar_fsm.svg",width:"550"})),(0,r.kt)("p",null,"Each controller's state is comprised of two pieces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"initial")," fixed configuration (",(0,r.kt)("em",{parentName:"li"},"primary"),", ",(0,r.kt)("em",{parentName:"li"},"backup"),")"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"runtime")," FSM state (",(0,r.kt)("inlineCode",{parentName:"li"},"PRIMARY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"BACKUP"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ACTIVE"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PASSIVE"),")")),(0,r.kt)("p",null,"Each controller stays in its initial state (",(0,r.kt)("inlineCode",{parentName:"p"},"PRIMARY"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"BACKUP"),") until it hears\nits peer's state, triggering the FSM state change to ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE"),'. Thus,\nthere are two "steady states" for the high-availability pair:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ACTIVE")," ",(0,r.kt)("em",{parentName:"li"},"primary")," <--\x3e ",(0,r.kt)("inlineCode",{parentName:"li"},"PASSIVE")," (or offline) ",(0,r.kt)("em",{parentName:"li"},"backup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ACTIVE")," ",(0,r.kt)("em",{parentName:"li"},"backup")," <--\x3e ",(0,r.kt)("inlineCode",{parentName:"li"},"PASSIVE")," (or offline) ",(0,r.kt)("em",{parentName:"li"},"primary"))),(0,r.kt)("p",null,'The peers exchange periodic heartbeats to determine liveness. A controller will\nconsider its peer "dead" if a set interval elapses without receiving any\nheartbeats. However, a ',(0,r.kt)("em",{parentName:"p"},"passive")," (",(0,r.kt)("inlineCode",{parentName:"p"},"BACKUP"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE"),") controller will only\nbecome ",(0,r.kt)("em",{parentName:"p"},"active")," (",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE"),") if two conditions are met simultaneously:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Its peer is dead (",(0,r.kt)("em",{parentName:"li"},"peer timeout"),")"),(0,r.kt)("li",{parentName:"ul"},"It receives a message from an E2E minion (",(0,r.kt)("em",{parentName:"li"},"client request"),")")),(0,r.kt)("p",null,"The E2E minion (client) only connects to one controller at any given time. If it\nreceives no response from the current controller for a set period\n(",(0,r.kt)("em",{parentName:"p"},"controller timeout"),"), it will disconnect and try connecting to the other\ncontroller. This is the only way to trigger controller failover."),(0,r.kt)("h4",{id:"split-brain"},"Split-Brain"),(0,r.kt)("p",null,"Split-brain (i.e. dual-actives) is avoided ",(0,r.kt)("strong",{parentName:"p"},"only")," if it is impossible to\npartition the network such that a subset of nodes can see each controller while\nthe controllers cannot see each other."),(0,r.kt)("h4",{id:"automatic-recovery"},"Automatic Recovery"),(0,r.kt)("p",null,"The FSM additionally supports ",(0,r.kt)("em",{parentName:"p"},"automatic recovery")," of the primary controller. If\nan ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE")," ",(0,r.kt)("em",{parentName:"p"},"backup")," sees that the ",(0,r.kt)("em",{parentName:"p"},"primary")," has come back online, it will yield\ncontrol once it deems the ",(0,r.kt)("inlineCode",{parentName:"p"},"PRIMARY")," to be stable (i.e. it has received a set\nnumber of consecutive heartbeats). All connected clients will be explicitly\nnotified to switch controller URLs to avoid timeouts."),(0,r.kt)("h4",{id:"exceptional-states"},"Exceptional States"),(0,r.kt)("p",null,"If an exceptional FSM state occurs (ex. peers reconnecting after a network\npartition to find they have split-brained), peers will attempt to recover by\nreverting to their initial states (",(0,r.kt)("inlineCode",{parentName:"p"},"PRIMARY"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"BACKUP"),")."),(0,r.kt)("h3",{id:"data-synchronization"},"Data Synchronization"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE")," controller sends new ",(0,r.kt)("em",{parentName:"p"},"application data")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE")," as part of\nthe heartbeat message. It also attaches a ",(0,r.kt)("em",{parentName:"p"},"sequence number"),", which the ",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE"),"\nechoes back in its heartbeat. Lastly, both controllers include their ",(0,r.kt)("em",{parentName:"p"},"software\nversion"),", and will ",(0,r.kt)("strong",{parentName:"p"},"not")," sync data if these versions mismatch. This heartbeat\nThrift structure is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct BinaryStarSync {\n  1: BinaryStarFsmState state;\n  2: i32 seqNum;\n  3: BinaryStarAppData data;\n  4: string version;\n}\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE")," controller receives a heartbeat with a mismatching sequence\nnumber, it will send a full copy of its data with the next heartbeat. Otherwise,\nit will only send data that changed since the last heartbeat, if any. The\nsequence number is only incremented when new data or the full data is sent, not\non every heartbeat."),(0,r.kt)("p",null,"When a controller becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE"),", it will reset its sequence number, then\nrequest current data to be sent from all its applications. Sequence numbers are\ninitialized to 0, but the first heartbeat from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE")," peer will have a\nsequence number of 1 because new application data was requested."),(0,r.kt)("p",null,"Only a ",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE")," controller will update its sequence number when receiving a\nheartbeat. This guarantees that the first heartbeat sent to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE")," will\nmismatch (since 0 cannot match), and thus trigger full data sync on the next\nheartbeat."),(0,r.kt)("p",null,"Note that the data synchronization protocol is strictly best-effort; it is\n",(0,r.kt)("strong",{parentName:"p"},"not")," fully fault-tolerant."),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("h3",{id:"controller"},"Controller"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarFsm")," - Contains a static function representing the state machine.\nThe actual states, events, and structs are defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"Controller.thrift"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Broker")," - Maintains a copy of the FSM. When receiving a client request, the\nFSM will indicate whether to drop the request (when ",(0,r.kt)("em",{parentName:"li"},"passive"),"), forward it\n(when ",(0,r.kt)("em",{parentName:"li"},"active"),"), or trigger controller failover (to become ",(0,r.kt)("em",{parentName:"li"},"active"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarApp")," - Maintains a synchronized copy of the FSM, as well as ZMQ\nPUB/SUB sockets with the peer (for sending and receiving heartbeats). This is\nthe main driver for the FSM, and also handles data synchronization between\npeers and with controller apps."),(0,r.kt)("li",{parentName:"ul"},"Controller apps with persistent data (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigApp"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"TopologyApp"),") -\nInstall handlers to send data (if ",(0,r.kt)("em",{parentName:"li"},"active"),") or receive data (if ",(0,r.kt)("em",{parentName:"li"},"passive"),")\nto and from ",(0,r.kt)("inlineCode",{parentName:"li"},"BinaryStarApp"),".")),(0,r.kt)("h3",{id:"minion"},"Minion"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Broker")," - Read the primary and backup controller URL, and switch between them\nif the current connection times out.")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"controller-configuration"},"Controller Configuration"),(0,r.kt)("p",null,"The primary and backup controllers must know each other's identity and initial\nconfiguration on startup. This initial configuration is passed as flags:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_primary")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether this controller is the primary (",(0,r.kt)("em",{parentName:"td"},"true"),") or backup (",(0,r.kt)("em",{parentName:"td"},"false"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_pub_port")),(0,r.kt)("td",{parentName:"tr",align:null},"The port that the controller publishes heartbeats on")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_peer_host")),(0,r.kt)("td",{parentName:"tr",align:null},"The hostname or IP address of the peer controller")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_peer_pub_port")),(0,r.kt)("td",{parentName:"tr",align:null},"The publisher port on the peer controller")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disable_bstar")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to disable the high availability feature")))),(0,r.kt)("p",null,"High-availability mode is only enabled if ",(0,r.kt)("inlineCode",{parentName:"p"},"bstar_peer_host")," is explicitly set,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"disable_bstar")," is off or not set. The primary should be started ",(0,r.kt)("strong",{parentName:"p"},"before"),"\nthe backup, or else the backup may become ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE"),"."),(0,r.kt)("p",null,"There are additional flags to tune timings:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_heartbeat_period_ms")),(0,r.kt)("td",{parentName:"tr",align:null},"Heartbeat interval (in ms)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_failover_missed_heartbeats")),(0,r.kt)("td",{parentName:"tr",align:null},'Number of missed heartbeats before declaring the peer "dead"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bstar_primary_recovery_heartbeats")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of consecutive heartbeats before an ",(0,r.kt)("inlineCode",{parentName:"td"},"ACTIVE")," ",(0,r.kt)("em",{parentName:"td"},"backup")," performs ",(0,r.kt)("em",{parentName:"td"},"automatic recovery")," (0 to disable)")))),(0,r.kt)("p",null,"The backup controller URL is passed to the minion using Open/R's ",(0,r.kt)("inlineCode",{parentName:"p"},"KvStore"),", the\nsame way as the primary URL. The key is ",(0,r.kt)("inlineCode",{parentName:"p"},"e2e-ctrl-url-backup"),", and can be added\nto any node's configuration (e.g. a POP node) as part of ",(0,r.kt)("inlineCode",{parentName:"p"},"kvstoreParams"),"."),(0,r.kt)("h3",{id:"viewing-runtime-state"},"Viewing Runtime State"),(0,r.kt)("p",null,"The controller can be queried for the current FSM state using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"BSTAR_GET_STATE")," message. This is sent as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tg version controller"),"\ncommand in the TG CLI, and is returned via the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/getHighAvailabilityState"),"\nendpoint in the REST API service."),(0,r.kt)("h3",{id:"upgrade-procedure"},"Upgrade Procedure"),(0,r.kt)("p",null,"When performing software upgrades on both controllers, upgrade the ",(0,r.kt)("em",{parentName:"p"},"backup"),"\ncontroller first, then the ",(0,r.kt)("em",{parentName:"p"},"primary")," controller. Note that the controllers will\nnot sync data when the versions mismatch, so any changes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ACTIVE"),"\ncontroller will ",(0,r.kt)("strong",{parentName:"p"},"not")," propagate to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PASSIVE")," during this time. This is\ndone to prevent any potential issues with configuration management between\ndifferent controller versions, especially if migration steps are required as\npart of a software upgrade."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://zguide.zeromq.org/php:chapter4#High-Availability-Pair-Binary-Star-Pattern"},"Binary Star Pattern")," - ZMQ's primary-backup high-availability design")))}m.isMDXComponent=!0}}]);