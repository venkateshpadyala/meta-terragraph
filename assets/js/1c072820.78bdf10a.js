"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6830],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),f=a,h=u["".concat(s,".").concat(f)]||u[f]||c[f]||r;return t?i.createElement(h,o(o({ref:n},p),{},{components:t})):i.createElement(h,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={},o="Routing and Traffic Engineering",l={unversionedId:"runbook/Routing",id:"runbook/Routing",title:"Routing and Traffic Engineering",description:"This document describes Terragraph's routing and traffic engineering features.",source:"@site/../docs/runbook/Routing.md",sourceDirName:"runbook",slug:"/runbook/Routing",permalink:"/docs/runbook/Routing",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/runbook/Routing.md",tags:[],version:"current",frontMatter:{},sidebar:"runbookSidebar",previous:{title:"Monitoring and Alerting",permalink:"/docs/runbook/Monitoring"},next:{title:"Testing and Measurements",permalink:"/docs/runbook/Testing"}},s={},d=[{value:"Routing",id:"routing",level:2},{value:"Open/R",id:"openr",level:3},{value:"Platform Agent",id:"platform-agent",level:3},{value:"Linux",id:"linux",level:4},{value:"VPP",id:"vpp",level:4},{value:"Traffic Engineering",id:"traffic-engineering",level:2},{value:"MCS-Based Routing",id:"mcs-based-routing",level:3},{value:"Soft Draining Links",id:"soft-draining-links",level:3},{value:"Fixed Link Metrics",id:"fixed-link-metrics",level:3},{value:"Prefix Allocation",id:"prefix-allocation",level:2},{value:"Node Prefix Allocation",id:"node-prefix-allocation",level:3},{value:"CPE Prefix Allocation",id:"cpe-prefix-allocation",level:3},{value:"Traffic Policing and Classification",id:"traffic-policing-and-classification",level:2},{value:"HQoS Configuration",id:"hqos-configuration",level:2}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routing-and-traffic-engineering"},"Routing and Traffic Engineering"),(0,a.kt)("p",null,"This document describes Terragraph's routing and traffic engineering features."),(0,a.kt)("a",{id:"routing-routing"}),(0,a.kt)("h2",{id:"routing"},"Routing"),(0,a.kt)("p",null,"Routing in Terragraph involves two main pieces of software: Open/R and a\nplatform agent (",(0,a.kt)("inlineCode",{parentName:"p"},"fib_nss"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"fib_vpp"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"platform_linux"),"). Open/R performs all\nrouting and runs a distributed key-value store to implement a link-state routing\nprotocol. The platform agent is the entity that configures the forwarding table\nreceived from Open/R in Linux or hardware using a platform-specific API."),(0,a.kt)("h3",{id:"openr"},"Open/R"),(0,a.kt)("p",null,'Open/R computes routes by building a graph using the adjacency and prefix\ninformation in the distributed key-value store. It runs a weighted\nshortest-paths algorithm to all other nodes, and uses Equal-Cost Multi-Path\nrouting (ECMP) when multiple "best paths" exist to distribute traffic along each\npath. Open/R then uses the best paths to determine the next hop for each\ndestination, and provides this information to the platform agent to program into\nthe hardware; this determines how data gets forwarded between interfaces on the\nnode.'),(0,a.kt)("p",null,"Open/R is upgraded between the M78, M79, and M80 Terragraph releases. A number\nof backwards compatibility changes are included in Terragraph's version of\nOpen/R. In particular, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Spark"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"KvStore"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"PrefixManager")," modules are\nmade backwards compatible. If pre-M80 backwards compatibility is not needed,\ncompatibility features can be disabled in node configuration by enabling\n",(0,a.kt)("inlineCode",{parentName:"p"},"envParams.OPENR_ENABLE_SPARK2")," and disabling\n",(0,a.kt)("inlineCode",{parentName:"p"},"envParams.OPENR_ENABLE_DEPRECATED_PREFIXES"),"."),(0,a.kt)("h3",{id:"platform-agent"},"Platform Agent"),(0,a.kt)("p",null,"Open/R uses the link-local IPv6 address and interface name as the next hop for\nforwarding purposes. It is the job of the platform agent to convert this\nlink-local IPv6 address to a MAC address for forwarding."),(0,a.kt)("h4",{id:"linux"},"Linux"),(0,a.kt)("p",null,"Open/R provides a Linux-based platform agent called ",(0,a.kt)("inlineCode",{parentName:"p"},"platform_linux"),". When Linux\nis used as the forwarding agent, all the routes are programmed into the Linux\nrouting table. Linux performs neighbor discovery and maps the next hop IPv6\naddresses to MAC addresses."),(0,a.kt)("h4",{id:"vpp"},"VPP"),(0,a.kt)("p",null,"Terragraph's Puma hardware uses the Data Plane Development Kit (",(0,a.kt)("a",{parentName:"p",href:"https://www.dpdk.org/"},"DPDK"),") along\nwith the Vector Packet Processing (",(0,a.kt)("a",{parentName:"p",href:"https://wiki.fd.io/view/VPP"},"VPP"),") framework for packet forwarding.\nTerragraph provides a software agent, ",(0,a.kt)("inlineCode",{parentName:"p"},"fib_vpp"),", which programs routes learned\nvia Open/R into VPP's Forwarding Information Base (FIB)."),(0,a.kt)("a",{id:"routing-te"}),(0,a.kt)("h2",{id:"traffic-engineering"},"Traffic Engineering"),(0,a.kt)("p",null,"Basic traffic engineering controls are defined in the node configuration, and\nare described in the following sections. See\n",(0,a.kt)("a",{parentName:"p",href:"/docs/runbook/Maintenance#maintenance-config"},"Maintenance and Configuration")," for\ninstructions on editing the node configuration."),(0,a.kt)("h3",{id:"mcs-based-routing"},"MCS-Based Routing"),(0,a.kt)("p",null,'Terragraph can be configured to prefer high data-rate wireless links over low\ndata-rate links. In Open/R, each link (wired or wireless) has an associated\nrouting cost, or "metric", which is 1 by default. For low data-rate wireless\nlinks, this cost is increased to make the link less preferable in routing\ncomputations when considering any alternate routes. The default mapping of\ndata-rate (MCS) to link cost (metric) is shown in the table below:'),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"MCS"),(0,a.kt)("th",{parentName:"tr",align:null},"Metric"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"2-3"),(0,a.kt)("td",{parentName:"tr",align:null},"15")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"4-8"),(0,a.kt)("td",{parentName:"tr",align:null},"3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"9-12"),(0,a.kt)("td",{parentName:"tr",align:null},"1")))),(0,a.kt)("p",null,"Note that Terragraph hardware does not support data on an MCS lower than 2. The\nnumber of MCS buckets and the mapping of each MCS to metric is configurable on\neach node through the ",(0,a.kt)("inlineCode",{parentName:"p"},"openrParams.linkMetricConfig")," config field."),(0,a.kt)("h3",{id:"soft-draining-links"},"Soft Draining Links"),(0,a.kt)("p",null,'Individual links can be "soft drained" using the\n',(0,a.kt)("inlineCode",{parentName:"p"},"linkParamsOverride.<macAddr>.openrLinkParams.softDisable")," config field. A\nsoft-drained link simply has a very high link metric (100000), and will be\navoided unless no other paths are possible."),(0,a.kt)("h3",{id:"fixed-link-metrics"},"Fixed Link Metrics"),(0,a.kt)("p",null,"Similar to soft draining, links can have fixed metrics assigned to them. This\nsetting is defined in the node configuration at\n",(0,a.kt)("inlineCode",{parentName:"p"},"linkParamsOverride.<macAddr>.openrLinkParams.fixedMetric"),"."),(0,a.kt)("a",{id:"routing-prefix-alloc"}),(0,a.kt)("h2",{id:"prefix-allocation"},"Prefix Allocation"),(0,a.kt)("p",null,"This section describes prefix allocation procedures for Terragraph nodes and\ntheir CPE interfaces."),(0,a.kt)("a",{id:"routing-node-prefix-alloc"}),(0,a.kt)("h3",{id:"node-prefix-allocation"},"Node Prefix Allocation"),(0,a.kt)("p",null,"Terragraph has three different schemes that define how prefixes are allocated\nfor each Terragraph node:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Distributed")," - Distributed prefix allocation is completely handled within\nOpen/R. Under this scheme, nodes pick random prefixes from the allowed range\nand advertise them to the network. The algorithm attempts to resolve any\ncollisions, but is not always successful in practice; this can result in\nduplicated prefixes or unreachable nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Centralized (default)")," - Centralized prefix allocation is handled by the E2E\ncontroller. The controller performs all prefix allocations, which prevents\ncollisions and enables more sophisticated allocation algorithms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Deterministic")," - Deterministic prefix allocation is also handled by the E2E\ncontroller. The controller assigns prefixes to nodes based on the network\ntopology to allow POP nodes to take advantage of route summarization and help\nload balance ingress traffic.")),(0,a.kt)("p",null,"Terragraph uses ",(0,a.kt)("em",{parentName:"p"},"centralized prefix allocation")," by default."),(0,a.kt)("p",null,"Both centralized and deterministic prefix allocation require initial parameters\nto be provided through the ",(0,a.kt)("inlineCode",{parentName:"p"},"thrift::PrefixAllocParams")," structure in the\ncontroller configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct PrefixAllocParams {\n  1: string seedPrefix;\n  2: i32 allocPrefixLen;\n}\n")),(0,a.kt)("p",null,"An example controller configuration with centralized prefix allocation enabled\nis shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "flags": {\n    "enable_centralized_prefix_alloc": "true",\n    "enable_deterministic_prefix_alloc": "false"\n  },\n  "prefixAllocParams": {\n    "seedPrefix": "face:b00c:babe::/48",\n    "allocPrefixLen": 64\n  }\n}\n')),(0,a.kt)("p",null,"Without the proper configuration, the controller will automatically revert to\ndistributed prefix allocation to allow the network to come up."),(0,a.kt)("a",{id:"routing-cpe-prefix-alloc"}),(0,a.kt)("h3",{id:"cpe-prefix-allocation"},"CPE Prefix Allocation"),(0,a.kt)("p",null,"Terragraph nodes will allocate an IPv6 prefix for each CPE interface if a\nspecific CPE interface prefix (",(0,a.kt)("inlineCode",{parentName:"p"},"cpeConfig.TenGigabitEthernetX.prefix"),") is not\nconfigured. Due to SLAAC being enabled on CPE interfaces automatically, the\nIPv6 prefix assigned to each CPE interface must have a fixed length of ",(0,a.kt)("inlineCode",{parentName:"p"},"/64"),".\nThe CPE interface prefix is derived based on the node prefix in both kernel\nmode and VPP mode, with several implementation differences highlighted below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Kernel mode:")," Terragraph nodes only support one CPE interface in kernel\nmode. The ",(0,a.kt)("inlineCode",{parentName:"li"},"lo")," interface will be used to set up this CPE interface, so the\nCPE interface prefix will be the same as the node prefix."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"VPP mode:")," Each CPE interface must be configured with a unique prefix due\nto VPP routing requirements. If the node prefix length is at least ",(0,a.kt)("inlineCode",{parentName:"li"},"/63"),", VPP\nwill use the node prefix as the seed prefix and generate a ",(0,a.kt)("inlineCode",{parentName:"li"},"/64")," subnet for\neach CPE interface sequentially, or until the address space is exhausted. For\nexample, if a Terragraph node has the node prefix ",(0,a.kt)("inlineCode",{parentName:"li"},"2001:db8::/62")," and 3 CPE\ninterfaces configured, a possible CPE interface prefix allocation is as\nfollows:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'TenGigabitEthernet0.prefix="2001:db8:0:1::/64"\nTenGigabitEthernet1.prefix="2001:db8:0:2::/64"\nTenGigabitEthernet2.prefix="2001:db8:0:3::/64"\n')))),(0,a.kt)("a",{id:"routing-traffic-policing-and-classification"}),(0,a.kt)("h2",{id:"traffic-policing-and-classification"},"Traffic Policing and Classification"),(0,a.kt)("p",null,"Packets arriving on CPE interfaces may be policed according to their assured\nforwarding (AF) class by appling a two-rate/three-color policing function.\nInbound traffic is expected to be marked with DSCP corresponding to one of the\nsupported traffic classes with low drop precedence (green). All other traffic,\nincluding traffic with unknown DSCP values and traffic of any other drop\nprecedence (non-green), is considered equivalent to AF11 (traffic class 3,\ngreen). Policed traffic will be marked with DSCP values corresponding to AF\nper-hop-behavior as defined in RFC 2597. The per-interface traffic policing\npolicy may be defined in node configuration like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "cpeConfig": {\n    "TenGigabitEthernet0": {\n      "policers": {\n        "0": {"cir": 1000, "eir": 2000},\n        "2": {"cir": 1000, "eir": 2000},\n        "3": {"cir": 1000, "eir": 2000},\n        "1": {"cir": 1000, "eir": 2000}\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cir")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"eir")," are both in units of kilobytes per second."),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"TenGigabitEthernet0")," is a CPE interface. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"cpeParam.TenGigabitEthernet0.policers")," object is a key-value map from AF\ntraffic class to committed information rate (CIR) and excess information rate\n(EIR). The policing behavior follows RFC 4115, where the peak information rate\n(PIR) is the sum of CIR and EIR, and the committed burst size (CBS) and excess\nburst size (EBS) values are set as the CIR and EIR values over 1 second,\nrespectively. Traffic arriving at ",(0,a.kt)("inlineCode",{parentName:"p"},"TenGigabitEthernet0")," under the CIR has the\nlowest drop priority. Traffic arriving over the CIR but under the PIR has higher\ndrop priority. Traffic arriving over the PIR is dropped. The EIR can also be\nconfigured to be 0, in which case a one-rate/two-color policing function will be\nused, and traffic under the CIR will be marked with the lowest drop priority\nwhile all other traffic is dropped."),(0,a.kt)("a",{id:"routing-hqos-configuration"}),(0,a.kt)("h2",{id:"hqos-configuration"},"HQoS Configuration"),(0,a.kt)("p",null,"Packets that reach the WiGig net interfaces are scheduled according to the DSCP\nfield present in the IP header. The 6-bit DSCP field may take 64 possible\nvalues. Each DSCP value a packet may hold has a corresponding traffic class\n(TC), color, and queue. The TC and color determine the packet's scheduling\npriority."),(0,a.kt)("p",null,"HQoS configuration is only supported on platforms using the VPP DPDK plugin."),(0,a.kt)("p",null,"The HQoS module stores scheduling policies in the TC translation table which is\nindexed by DSCP value. Each entry is a 3-tuple of class/queue/color. The\nfollowing is the default table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[ 0 ..   7]: 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y\n[ 8 ..  15]: 3/0/Y 3/0/Y 3/0/G 3/0/Y 3/0/Y 3/0/Y 3/0/R 3/0/Y\n[16 ..  23]: 3/0/Y 3/0/Y 2/0/G 3/0/Y 2/0/Y 3/0/Y 2/0/R 3/0/Y\n[24 ..  31]: 3/0/Y 3/0/Y 1/0/G 3/0/Y 1/0/Y 3/0/Y 1/0/R 3/0/Y\n[32 ..  39]: 3/0/Y 3/0/Y 0/0/G 3/0/Y 0/0/Y 3/0/Y 0/0/R 3/0/Y\n[40 ..  47]: 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y\n[48 ..  55]: 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y\n[56 ..  63]: 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y 3/0/Y\n")),(0,a.kt)("p",null,"The default TC table may be overwritten by adding DSCP-policy mappings to\nthe node configuration with the following schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "qosConfig": {\n    "dscpEntries": {\n      "0": {"tc":3, "queue":0, "color":"Y"},\n      "1": {"tc":2, "queue":0, "color":"Y"},\n      "2": {"tc":2, "queue":0, "color":"Y"},\n      "3": {"tc":1, "queue":0, "color":"G"}\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Each entry in the TC table mapping is keyed on the DSCP value. The value of\neach entry has three attributes, ",(0,a.kt)("inlineCode",{parentName:"p"},"tc"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"queue"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"color"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"tc")," may be valued\n","[0, 3]",", ",(0,a.kt)("inlineCode",{parentName:"p"},"queue")," may only have value 0, and ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," may be ",(0,a.kt)("inlineCode",{parentName:"p"},"R"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"G"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"Y"),". Any\nnumber of DSCP entries can be specified under ",(0,a.kt)("inlineCode",{parentName:"p"},"mapping"),", and DSCP entries not\npresent in the node configuration take the default value."))}c.isMDXComponent=!0}}]);