"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7887],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},l="API Service",o={unversionedId:"developer/API_Service",id:"developer/API_Service",title:"API Service",description:"This document describes the REST API service for the E2E stack.",source:"@site/../docs/developer/API_Service.md",sourceDirName:"developer",slug:"/developer/API_Service",permalink:"/docs/developer/API_Service",draft:!1,editUrl:"https://github.com/terragraph/meta-terragraph/edit/main/docs/../docs/developer/API_Service.md",tags:[],version:"current",frontMatter:{},sidebar:"developerManualSidebar",previous:{title:"Terragraph CLI",permalink:"/docs/developer/Terragraph_CLI"},next:{title:"Local Web Interface",permalink:"/docs/developer/Local_Web_Interface"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Structure",id:"structure",level:2},{value:"API Responses",id:"api-responses",level:2},{value:"Authorization",id:"authorization",level:2},{value:"Auditing",id:"auditing",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Source Files",id:"source-files",level:3},{value:"Example",id:"example",level:3},{value:"<code>ApiClient.cpp</code>",id:"apiclientcpp",level:4},{value:"<code>Controller.thrift</code>",id:"controllerthrift",level:4},{value:"<code>apidoc.json</code>",id:"apidocjson",level:4},{value:"Resources",id:"resources",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-service"},"API Service"),(0,r.kt)("p",null,"This document describes the REST API service for the E2E stack."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Terragraph's ",(0,r.kt)("inlineCode",{parentName:"p"},"api_service")," provides a REST API for the E2E controller and NMS\naggregator. The service translates HTTP/JSON requests into ZMQ/Thrift calls to\nthe controller or aggregator, then returns the responses to the client\nJSON-encoded."),(0,r.kt)("p",null,"API Service is written in C++ using a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/proxygen"},"Proxygen")," web server, and includes\ndocumentation generated from Javadoc-style annotations in the source code using\n",(0,r.kt)("a",{parentName:"p",href:"http://apidocjs.com/"},"apiDoc"),"."),(0,r.kt)("h2",{id:"structure"},"Structure"),(0,r.kt)("p",null,"The service exposes three routes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/api/"),": A comprehensive REST API for E2E services."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/api/stream/"),": A push API using server-sent events (SSE)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/docs/"),": Static API documentation.")),(0,r.kt)("p",null,"The classes containing the request handlers and method definitions are shown in\nthe table below."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Route"),(0,r.kt)("th",{parentName:"tr",align:null},"Request Handler"),(0,r.kt)("th",{parentName:"tr",align:null},"Method Definitions"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/api/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RequestHandler")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ApiClient"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/api/stream/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StreamRequestHandler")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StreamApiClient"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/docs/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StaticHandler")),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h2",{id:"api-responses"},"API Responses"),(0,r.kt)("p",null,"Upon success, every API method returns with status ",(0,r.kt)("inlineCode",{parentName:"p"},"200 OK"),' and "Content-Type"\nheader set to "application/json". A "success" response is sent if API service is\nable to translate the request and receive a response from the underlying\nservice, regardless of whether the actual service endpoint returned a logic\nerror.'),(0,r.kt)("p",null,"The following HTTP error codes may also be returned:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"400 Bad Request")," - malformed request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"401 Unauthorized")," - missing or malformed authorization header (more details\nbelow)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"403 Forbidden")," - authorization failure (more details below)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"503 Service Unavailable")," - connection error to the underlying service, or\nrequest deserialization failure")),(0,r.kt)("h2",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"API Service can perform permission enforcement and sender verification on its\n",(0,r.kt)("inlineCode",{parentName:"p"},"/api/"),' route using a public key. If a key is provided, each request must\ncontain a signed JWT (JSON Web Token) in the "Authorization" HTTP header as\nfollows:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Authorization: Bearer <token>\n")),(0,r.kt)("p",null,'The token payload must contain a "roles" claim. Each role is effectively a\npermission, with the format ',(0,r.kt)("inlineCode",{parentName:"p"},"<prefix><ApiCategory>_<ApiLevel>"),". A request is\npermitted only if ",(0,r.kt)("em",{parentName:"p"},"any")," role meets the base permission level required by the\nendpoint."),(0,r.kt)("p",null,"API categories and levels are defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"Permissions.thrift"),". The category\n",(0,r.kt)("inlineCode",{parentName:"p"},"ALL")," is a special case representing all categories. Levels are defined in a\nhierarchy, such that a higher enum value implies all lower values (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"WRITE"),"\nimplies ",(0,r.kt)("inlineCode",{parentName:"p"},"READ"),")."),(0,r.kt)("h2",{id:"auditing"},"Auditing"),(0,r.kt)("p",null,'API Service creates a separate audit log for all "write" requests received. This\nlog is written to ',(0,r.kt)("inlineCode",{parentName:"p"},"/data/audit_logs/api_audit.log")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"--audit_log_path"),", if\nprovided). Each entry is a JSON object containing the endpoint, request body,\nand values from the authorization token."),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/terragraph-api/README.md")," for instructions on building the REST\nAPI documentation from the source files (listed below). The generated HTML files\nare checked into the ",(0,r.kt)("inlineCode",{parentName:"p"},"apidoc/")," directory."),(0,r.kt)("h3",{id:"source-files"},"Source Files"),(0,r.kt)("p",null,"apiDoc collects data from the following places:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The method-level comments (",(0,r.kt)("inlineCode",{parentName:"li"},"@api"),") in ",(0,r.kt)("inlineCode",{parentName:"li"},"ApiClient.cpp")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"StreamApiClient.cpp"),"."),(0,r.kt)("li",{parentName:"ul"},"The imported parameter-level comments (",(0,r.kt)("inlineCode",{parentName:"li"},"@apiUse"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"@apiDefine"),") in all\nreferenced ",(0,r.kt)("inlineCode",{parentName:"li"},".thrift")," files."),(0,r.kt)("li",{parentName:"ul"},"The ordering of methods specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"apidoc.json"),".")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The example below describes the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/getNodeConfig")," endpoint."),(0,r.kt)("h4",{id:"apiclientcpp"},(0,r.kt)("inlineCode",{parentName:"h4"},"ApiClient.cpp")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' 1: /**\n 2:  * @api {post} /getNodeConfig Get Node Config\n 3:  * @apiName GetNodeConfig\n 4:  * @apiPermission CONFIG_READ\n 5:  * @apiGroup NodeConfiguration\n 6:  *\n 7:  * @apiDescription Retrieves the full configuration for the given node.\n 8:  *\n 9:  * @apiUse GetCtrlConfigReq\n10:  * @apiExample {curl} Example:\n11:  *    curl -id \'{"node": "terra111.f5.tb.a404-if", "swVersion": "RELEASE_M21"}\' http://localhost:443/api/getNodeConfig\n12:  * @apiUse GetCtrlConfigResp_SUCCESS\n13:  * @apiSuccessExample {json} Success-Response:\n14:  * {\n15:  *     "config": "{...}"\n16:  * }\n17:  */\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Line"),(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@api {[method]} /[apiPath] [Method Title]")),(0,r.kt)("td",{parentName:"tr",align:null},"Method declaration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/api")," is prepended to all paths")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiName [MethodName]")),(0,r.kt)("td",{parentName:"tr",align:null},"Method name"),(0,r.kt)("td",{parentName:"tr",align:null},"Not rendered in HTML")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiPermission [PermissionName]")),(0,r.kt)("td",{parentName:"tr",align:null},"Permission name"),(0,r.kt)("td",{parentName:"tr",align:null},"If authorization is enabled, the minimum required permission level (excluding prefix)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiGroup [CategoryName]")),(0,r.kt)("td",{parentName:"tr",align:null},"Category name"),(0,r.kt)("td",{parentName:"tr",align:null},"To render with spaces, declare elsewhere:",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"@apiDefine [CategoryName] [Name With Spaces]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiDescription [Long method description.]")),(0,r.kt)("td",{parentName:"tr",align:null},"Method description"),(0,r.kt)("td",{parentName:"tr",align:null},"Allows multi-line strings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiUse [ApiDefineName{_GROUP}]")),(0,r.kt)("td",{parentName:"tr",align:null},"Import an ",(0,r.kt)("inlineCode",{parentName:"td"},"@apiDefine")," block by name"),(0,r.kt)("td",{parentName:"tr",align:null},"Write all ",(0,r.kt)("em",{parentName:"td"},"request")," fields here")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10-11"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiExample {[type]} Example:"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"[example command]")),(0,r.kt)("td",{parentName:"tr",align:null},"Request example"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiUse [ApiDefineName_SUCCESS]")),(0,r.kt)("td",{parentName:"tr",align:null},"Import an ",(0,r.kt)("inlineCode",{parentName:"td"},"@apiDefine")," block by name"),(0,r.kt)("td",{parentName:"tr",align:null},"Write all ",(0,r.kt)("em",{parentName:"td"},"response")," fields here")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13-16"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiSuccessExample {[type]} Success-Response:"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"[example JSON response]")),(0,r.kt)("td",{parentName:"tr",align:null},"Response example"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("p",null,"Note that a block imported via ",(0,r.kt)("inlineCode",{parentName:"p"},"@apiUse")," cannot ",(0,r.kt)("inlineCode",{parentName:"p"},"@apiUse")," another block (i.e.\nnesting is not supported). All nested request parameters must be written in the\nmethod definition blocks."),(0,r.kt)("h4",{id:"controllerthrift"},(0,r.kt)("inlineCode",{parentName:"h4"},"Controller.thrift")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," 1: /**\n 2:  * @apiDefine GetCtrlConfigReq\n 3:  * @apiParam {String} node The node name\n 4:  * @apiParam {String} [swVersion]\n 5:  *           The software version to use as the base config.\n 6:  *           If this is omitted, the controller will use the last version that\n 7:  *           the node reported; if no version is known to the controller, an\n 8:  *           error will be returned.\n 9:  */\n10: struct GetCtrlConfigReq {\n11:   1: string node;\n12:   2: optional string swVersion;\n13: }\n14:\n15: /**\n16:  * @apiDefine GetCtrlConfigResp_SUCCESS\n17:  * @apiSuccess {String} config The full node config (JSON)\n18:  */\n19: struct GetCtrlConfigResp {\n20:   1: string config;\n21: }\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Line"),(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiDefine [ThriftName{_GROUP}]")),(0,r.kt)("td",{parentName:"tr",align:null},"Block declaration"),(0,r.kt)("td",{parentName:"tr",align:null},"Use the Thrift struct name (with optional ",(0,r.kt)("inlineCode",{parentName:"td"},"_GROUP")," suffix for nested request parameters)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3, 4-8"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiParam (:[GroupName]) {[DataType]{=[enum]}} [field]{=[default]}"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"[Long field description.]")),(0,r.kt)("td",{parentName:"tr",align:null},"Request parameter"),(0,r.kt)("td",{parentName:"tr",align:null},"For nested structs, add ",(0,r.kt)("inlineCode",{parentName:"td"},"_GROUP")," suffix and ",(0,r.kt)("inlineCode",{parentName:"td"},"(:Group)")," tag; for enumerations, fill in list of allowed values (comma-separated); for optional fields, wrap field name in square brackets ",(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiDefine [ThriftName_SUCCESS]")),(0,r.kt)("td",{parentName:"tr",align:null},"Block declaration"),(0,r.kt)("td",{parentName:"tr",align:null},"Use the Thrift struct name (with mandatory ",(0,r.kt)("inlineCode",{parentName:"td"},"_SUCCESS")," suffix for response parameters)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"17"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@apiSuccess (:[GroupName]) {[DataType]{=[enum]}} [field]"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"[Long field description.]")),(0,r.kt)("td",{parentName:"tr",align:null},"Response parameter"),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("inlineCode",{parentName:"td"},"@apiParam"))))),(0,r.kt)("p",null,"Note that using ",(0,r.kt)("em",{parentName:"p"},"groups")," (not to be confused with ",(0,r.kt)("inlineCode",{parentName:"p"},"@apiGroup"),", which represents\n",(0,r.kt)("em",{parentName:"p"},"categories"),") is mandatory for nested Thrift structs. Otherwise, apiDoc will\nrender the parameters for all structs in one combined block."),(0,r.kt)("h4",{id:"apidocjson"},(0,r.kt)("inlineCode",{parentName:"h4"},"apidoc.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "order": [\n    "...",\n    "NodeConfiguration",\n      "GetNodeConfig",\n      "...",\n  ]\n}\n')),(0,r.kt)("p",null,'The "order" property determines the order of the methods in the generated HTML\nfiles. Use method names as written in ',(0,r.kt)("inlineCode",{parentName:"p"},"@apiName")," and category names as written\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"@apiGroup"),"."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/proxygen"},"Proxygen")," - Meta's C++ HTTP libraries"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://apidocjs.com/"},"apiDoc")," - Documentation generator for REST APIs")))}m.isMDXComponent=!0}}]);